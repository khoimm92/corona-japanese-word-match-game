-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
    local physics = { data =
    {

        ["sprite2"] = {




            {
                pe_fixture_id = "sprite", density = 2, friction = 0, bounce = 0,
                filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                shape = {   -11.5, -14  ,  -10.5, -10  ,  -17.5, -3  ,  -24.5, -14  }
            }
            ,
            {
                pe_fixture_id = "sprite", density = 2, friction = 0, bounce = 0,
                filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                shape = {   -10.5, -10  ,  -6.5, -23  ,  10.5, 16  ,  -8.5, 21  }
            }
            ,
            {
                pe_fixture_id = "sprite", density = 2, friction = 0, bounce = 0,
                filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                shape = {   20.5, -10  ,  17.5, 21  ,  10.5, 16  ,  -6.5, -23  ,  15.5, -23  }
            }
            ,
            {
                pe_fixture_id = "sprite", density = 2, friction = 0, bounce = 0,
                filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                shape = {   -6.5, -23  ,  -10.5, -10  ,  -11.5, -14  }
            }



        }

    } }

    -- apply scale factor
    local s = scale or 1.0
    for bi,body in pairs(physics.data) do
        for fi,fixture in ipairs(body) do
            if(fixture.shape) then
                for ci,coordinate in ipairs(fixture.shape) do
                    fixture.shape[ci] = s * coordinate
                end
            else
                fixture.radius = s * fixture.radius
            end
        end
    end

    function physics:get(name)
        return unpack(self.data[name])
    end

    function physics:getFixtureId(name, index)
        return self.data[name][index].pe_fixture_id
    end

    return physics;
end

return M

